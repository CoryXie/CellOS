/* stdio.h - standard buffered input/output */

/*
APPLICATION USAGE

    Since standard I/O streams may use an underlying file descriptor 
    to access the file associated with a stream, application developers
    need to be aware that {FOPEN_MAX} streams may not be available if 
    file descriptors are being used to access files that are not 
    associated with streams.

RATIONALE

    There is a conflict between the ISO C standard and the POSIX 
    definition of the {TMP_MAX} macro that is addressed by 
    ISO/IEC 9899:1999 standard, Defect Report 336. The POSIX 
    standard is in alignment with the public record of the 
    response to the Defect Report. This change has not yet been 
    published as part of the ISO C standard.
*/
#ifndef _POSIX_STDIO_H
#define _POSIX_STDIO_H

#include <sys.h>
#include <stdarg.h>

/*
 * FILE
 *
 * A structure containing information about a file.
 */
 
typedef struct 
    {
    unsigned long handle; /* File handle */
    char *fpos; /* Current position of file pointer (absolute address) */
    void *base; /* Pointer to the base of the file */
    short flags; /* Flags (see FileFlags) */
    short unget; /* 1-byte buffer for ungetc (b15=1 if non-empty) */
    unsigned long alloc; /* Number of currently allocated bytes for the file */
    unsigned short buffincrement; /* Number of bytes allocated at once */
    } FILE;

/* 
 * fpos_t
 *
 * A non-array type containing all information needed to 
 * specify uniquely every position within a file.
 */
 
typedef unsigned long fpos_t;

/* Size of <stdio.h> buffers. */
#define BUFSIZ			8192

/* Maximum size of character array to hold ctermid() output. */
#define L_ctermid       32
#define L_cuserid  		32

/* Maximum size of character array to hold tmpnam() output. */
#define L_tmpnam        512

#define _IOFBF			0		/* Input/output fully buffered. */
#define _IOLBF			1		/* Input/output line buffered. */
#define _IONBF			2		/* Input/output unbuffered. */

/*
 * {FOPEN_MAX}
 *
 * Number of streams which the implementation guarantees can 
 * be open simultaneously. The value is at least eight.
 */
 
#define FOPEN_MAX		128
#ifndef STREAM_MAX
#define STREAM_MAX		FOPEN_MAX
#endif

/* 
 * {FILENAME_MAX}
 *
 * Maximum size in bytes of the longest filename string that 
 * the implementation guarantees can be opened.
 */
 
#define FILENAME_MAX	256

/*
 * {TMP_MAX}
 *
 * Minimum number of unique filenames generated by tmpnam().
 * Maximum number of times an application can call tmpnam() 
 * reliably. The value of {TMP_MAX} is at least 25. 
 *
 * On XSI-conformant systems, the value of {TMP_MAX} is at 
 * least 10000. 
 */
 
#define TMP_MAX			32768

/* Default directory prefix for tempnam(). */
#define	P_tmpdir		"/tmp/"

#ifdef EOF
#	undef EOF       /* End-of-file return value. */
#endif
#define EOF -1

#ifndef SEEK_SET
#	define SEEK_SET 0 /* Seek relative to start-of-file. */
#endif
#ifndef SEEK_CUR
#	define SEEK_CUR 1 /* Seek relative to current position. */
#endif
#ifndef SEEK_END
#	define SEEK_END 2 /* Seek relative to end-of-file. */
#endif

/* 
 * The <stdio.h> header shall define the following macros 
 * which shall expand to expressions of type "pointer to FILE" 
 * that point to the FILE objects associated, respectively, 
 * with the standard error, input, and output streams
 */
 
extern FILE *stdin;     /* Standard error output stream. */
extern FILE *stdout;    /* Standard input stream. */
extern FILE *stderr;    /* Standard output stream. */

#ifdef __cplusplus
extern "C" {
#endif

void     clearerr(FILE *);
char    *ctermid(char *);
int      dprintf(int, const char *restrict, ...);

int      fclose(FILE *);
FILE    *fdopen(int, const char *);

int      feof(FILE *);
int      ferror(FILE *);
int      fflush(FILE *);
int      fgetc(FILE *);
int      fgetpos(FILE *restrict, fpos_t *restrict);
char    *fgets(char *restrict, int, FILE *restrict);
int      fileno(FILE *);
void     flockfile(FILE *);
FILE    *fmemopen(void *restrict, size_t, const char *restrict);

FILE    *fopen(const char *restrict, const char *restrict);
int      fprintf(FILE *restrict, const char *restrict, ...);
int      fputc(int, FILE *);
int      fputs(const char *restrict, FILE *restrict);
size_t   fread(void *restrict, size_t, size_t, FILE *restrict);
FILE    *freopen(const char *restrict, const char *restrict,
             FILE *restrict);
int      fscanf(FILE *restrict, const char *restrict, ...);
int      fseek(FILE *, long, int);
int      fseeko(FILE *, off_t, int);

int      fsetpos(FILE *, const fpos_t *);
long     ftell(FILE *);
off_t    ftello(FILE *);
int      ftrylockfile(FILE *);
void     funlockfile(FILE *);

size_t   fwrite(const void *restrict, size_t, size_t, FILE *restrict);
int      getc(FILE *);
int      getchar(void);
int      getc_unlocked(FILE *);
int      getchar_unlocked(void);
ssize_t  getdelim(char **restrict, size_t *restrict, int,
             FILE *restrict);
ssize_t  getline(char **restrict, size_t *restrict, FILE *restrict);

char    *gets(char *);

FILE    *open_memstream(char **, size_t *);
int      pclose(FILE *);

void     perror(const char *);
FILE    *popen(const char *, const char *);

int      printf(const char *restrict, ...);
int      putc(int, FILE *);
int      putchar(int);
int      putc_unlocked(int, FILE *);
int      putchar_unlocked(int);

int      puts(const char *);
int      remove(const char *);
int      rename(const char *, const char *);
int      renameat(int, const char *, int, const char *);

void     rewind(FILE *);
int      scanf(const char *restrict, ...);
void     setbuf(FILE *restrict, char *restrict);
int      setvbuf(FILE *restrict, char *restrict, int, size_t);
int      snprintf(char *restrict, size_t, const char *restrict, ...);
int      sprintf(char *restrict, const char *restrict, ...);
int      sscanf(const char *restrict, const char *restrict, ...);
char    *tempnam(const char *, const char *);

FILE    *tmpfile(void);
char    *tmpnam(char *);

int      ungetc(int, FILE *);
int      vdprintf(int, const char *restrict, va_list);

int      vfprintf(FILE *restrict, const char *restrict, va_list);
int      vfscanf(FILE *restrict, const char *restrict, va_list);
int      vprintf(const char *restrict, va_list);
int      vscanf(const char *restrict, va_list);
int      vsnprintf(char *restrict, size_t, const char *restrict,
             va_list);
int      vsprintf(char *restrict, const char *restrict, va_list);
int      vsscanf(const char *restrict, const char *restrict, va_list);

#ifdef __cplusplus
}
#endif


#endif	/* _POSIX_STDIO_H */
